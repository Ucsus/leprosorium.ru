plugins {
    id 'java'
    id 'io.qameta.allure' version '2.10.0'
    id "io.freefair.lombok" version "6.6.1"
}

repositories {
    mavenCentral()
}

def allureVersion = '2.20.0',
    slf4jVersion = '2.0.5',
    selenideVersion = '6.9.0',
    jUnitVersion = '5.9.2',
    ownerVersion = '1.0.12',
    fakerVersion = '1.0.2',
    assertJVersion = '3.24.1',
    restAssuredVersion = '5.3.0',
    allureRestVersion = '2.20.0',
    jacksonVersion = '2.14.0',
    appiumVersion = '8.2.1',
    commonsIoVersion = '2.11.0'

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}
javadoc.options.encoding = 'UTF-8'

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$jUnitVersion",
            "com.github.javafaker:javafaker:$fakerVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.assertj:assertj-core:$assertJVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureRestVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "io.appium:java-client:$appiumVersion",
            "commons-io:commons-io:$commonsIoVersion"
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    systemProperty "chromoptions.prefs", "intl.accept_languages=en"

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task apiTests(type: Test) {
    useJUnitPlatform {
        includeTags "ui"
    }
}

task mobile_tests(type: Test) {
    useJUnitPlatform {
        includeTags "mobile"
    }
}

task web_tests(type: Test) {
    useJUnitPlatform {
        includeTags "web"
    }
}

task all_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'all'
    }
}